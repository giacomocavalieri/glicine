//// TODO
////

import gleam/int
import gleam/io
import gleam/list
import gleam/result
import gleam/string_builder.{StringBuilder} as sb
import glicine/extra/list as list_extra
import glicine/extra/path
import glicine/extra/result as result_extra
import glicine/extra/string as string_extra
import glicine/extra/style
import glicine/filter.{Keep}
import glicine/page.{Page, PageGenerationError, PageGenerator}
import glicine/post.{Post, PostGenerationError}

/// The reason why one of the blog generation steps may fail.
///
pub type GlicinePipelineError {
  /// Used to accumulate `PostGenerationError` that may
  /// occur in the step that converts files to posts.
  ///
  PostsGenerationStepFailed(reasons: List(PostGenerationError))

  /// Used to accumulate `PageGenerationError` that
  /// may occur in the step that converts posts to pages.
  ///
  PagesGenerationStepFailed(reasons: List(PageGenerationError))

  /// Occurs if, two or more of the generated pages, share the
  /// same name and path. It is reported as an error and stops the
  /// site generation since one page would overwrite the other
  /// depending on which one is saved first.
  ///
  DuplicatePagesNames(duplicate_names: List(String))
}

pub fn make_site(
  from posts_directory: String,
  to output_directory: String,
  filtering filter: fn(Post) -> Keep,
  with generators: List(PageGenerator),
) -> Result(Nil, GlicinePipelineError) {
  use <- result_extra.on_error(do: report_error)
  report_introduction()
  use all_posts <- result_extra.try(
    post.read_all(posts_directory),
    map_error: PostsGenerationStepFailed,
  )
  report_read_posts(all_posts, posts_directory)
  let posts = filter.keep(all_posts, with: filter)
  report_filtered_posts(posts)
  use pages <- result_extra.try(
    page.from_posts(posts, with: generators),
    map_error: PagesGenerationStepFailed,
  )
  report_generated_pages(pages, generators)
  use _ <- result.try(check_duplicate_names(pages))
  use _ <- result_extra.try(
    page.write_all(pages, to: output_directory),
    map_error: PagesGenerationStepFailed,
  )
  report_completion(output_directory)
  Ok(Nil)
}

fn check_duplicate_names(pages: List(Page)) -> Result(Nil, GlicinePipelineError) {
  let duplicate_names =
    pages
    |> list.map(fn(page) {
      page.path
      |> path.concat(page.name)
    })
    |> list_extra.duplicates

  case duplicate_names {
    [] -> Ok(Nil)
    _ -> Error(DuplicatePagesNames(duplicate_names))
  }
}

fn report_introduction() -> Nil {
  "\n✼ ✿ Glicine ✿ ✼\n"
  |> style.title
  |> io.println
}

fn report_read_posts(posts: List(Post), from: String) -> Nil {
  let posts_count =
    posts
    |> list.length

  sb.new()
  |> sb.append(int.to_string(posts_count))
  |> sb.append(" ")
  |> sb.append(string_extra.pick_form(posts_count, "post", "posts"))
  |> sb.append(" found in directory ")
  |> sb.append(style.path(from))
  |> sb.to_string
  |> style.success
  |> io.println
}

fn report_filtered_posts(posts: List(Post)) -> Nil {
  let posts_count =
    posts
    |> list.length

  sb.new()
  |> sb.append(int.to_string(posts_count))
  |> sb.append(" leftover ")
  |> sb.append(string_extra.pick_form(posts_count, "post", "posts"))
  |> sb.append(" after filtering")
  |> sb.to_string
  |> style.success
  |> io.println
}

fn report_generated_pages(
  pages: List(Page),
  generators: List(PageGenerator),
) -> Nil {
  let pages_count = list.length(pages)
  let generators_count = list.length(generators)

  sb.new()
  |> sb.append(int.to_string(pages_count))
  |> sb.append(" ")
  |> sb.append(string_extra.pick_form(pages_count, "page", "pages"))
  |> sb.append(" generated by ")
  |> sb.append(int.to_string(generators_count))
  |> sb.append(" ")
  |> sb.append(string_extra.pick_form(
    generators_count,
    "generator",
    "generators",
  ))
  |> sb.to_string
  |> style.success
  |> io.println
}

fn report_completion(to: String) -> Nil {
  sb.new()
  |> sb.append("site generated in directory ")
  |> sb.append(style.path(to))
  |> sb.append("\n")
  |> sb.to_string
  |> style.success
  |> io.println
}

fn report_error(error: GlicinePipelineError) -> Nil {
  case error {
    PostsGenerationStepFailed(reasons) ->
      error_list(reasons, post.error_to_string_builder)
    PagesGenerationStepFailed(reasons) ->
      error_list(reasons, page.error_to_string_builder)
    DuplicatePagesNames(duplicate_names) -> {
      sb.new()
      |> sb.append("✗ there were pages with the same ")
      |> sb.append(string_extra.pick_form(
        list.length(duplicate_names),
        "name",
        "names",
      ))
      |> sb.append(": ")
      |> sb.append_builder(
        duplicate_names
        |> list.map(style.name)
        |> list.map(sb.from_string)
        |> sb.join(", "),
      )
      |> sb.append("\nEach page should have a unique name so that they do not ")
      |> sb.append("overwrite each other")
    }
  }
  |> sb.append("\n")
  |> sb.to_string
  |> style.error
  |> io.println
}

fn error_list(
  from list: List(a),
  with fun: fn(a) -> StringBuilder,
) -> StringBuilder {
  list
  |> list.map(fun)
  |> list.map(sb.prepend(_, "✗ "))
  |> sb.join(with: "\n")
}
